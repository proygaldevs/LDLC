package sarandon.decotheco.thecoradores.bean;
// Generated 16-abr-2017 9:59:59 by Hibernate Tools 5.2.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.apache.log4j.Logger;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import sarandon.assistance.model.Core;
import sarandon.assistance.model.CoreImpl;
import sarandon.assistance.servlet.more.dataBBDD;
import sarandon.assistance.vo.Propuesta;

/**
 * Projects generated by hbm2java
 */
@Entity
@Table(name = "projects", catalog = "decotheco")
public class Projects implements java.io.Serializable {
	private final static Logger log = Logger.getLogger(dataBBDD.class);

	private Integer id;
	private Decoradores decoradores;
	private ProjectsStates projectsStates;
	public ProjectsStates projectsStatillos;
	private ProjectsTypes projectsTypes;
	private Users users;
	private String nombreProyecto;
	public Integer pagado;
	public Integer pagadillo;
	private Date fechaingreso;
	private Integer finalizado;
	private Date fechafin;
	private Integer estado;
	public Integer estadillo;
	private Date fechaestado;
	private String nombreProyectoDecorador;
	private String paso3Propuestas;
	private String paso33d;
	private String paso4Plano;
	private String paso4Ldlc;
	private Set<Citas> citases = new HashSet<Citas>(0);
	private Set<Regalos> regaloses = new HashSet<Regalos>(0);
	private Set<Preferences> preferenceses = new HashSet<Preferences>(0);
	private Set<Information> informations = new HashSet<Information>(0);
	private Set<Pagos> pagoses = new HashSet<Pagos>(0);
	public Users user_sin;
	public ArrayList<Propuesta> propuestas=new ArrayList<Propuesta>(0);
	public ArrayList<Propuesta> planos=new ArrayList<Propuesta>(0);
	public static String path="";
	
	public String diasRestantes="0";
	
	public Projects() {
	}

	public Projects(Decoradores decoradores,  ProjectsStates projectsStates, ProjectsTypes projectsTypes, Users users, String nombreProyecto, Integer pagado, Date fechaingreso,
			Integer finalizado, Date fechafin, Integer estado, Date fechaestado, String nombreProyectoDecorador,
			String paso3Propuestas, String paso33d, String paso4Plano, String paso4Ldlc, Set<Citas> citases,
			Set<Regalos> regaloses, Set<Preferences> preferenceses, Set<Information> informations, Set<Pagos> pagoses) throws Exception {
		this.decoradores = decoradores;
		this.users = users;
		this.nombreProyecto = nombreProyecto;
		this.setProjectsStates(projectsStates);
		this.setProjectsTypes(projectsTypes);
		this.pagado = pagado;
		this.fechaingreso = fechaingreso;
		this.finalizado = finalizado;
		this.fechafin = fechafin;
		this.estado = estado;
		this.fechaestado = fechaestado;
		this.nombreProyectoDecorador = nombreProyectoDecorador;
		this.paso3Propuestas = paso3Propuestas;
		this.paso33d = paso33d;
		this.paso4Plano = paso4Plano;
		this.paso4Ldlc = paso4Ldlc;
		this.citases = citases;
		this.regaloses = regaloses;
		this.preferenceses = preferenceses;
		this.informations = informations;
		this.pagoses = pagoses;
		setUser_sin();
		setPropuestas();
		setDiasRestantes();
		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
		
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_decorador")
	@JsonBackReference
	public Decoradores getDecoradores() {
		return this.decoradores;
	}

	public void setDecoradores(Decoradores decoradores) {
		this.decoradores = decoradores;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_usuario")
	@JsonBackReference
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
		setUser_sin();
	}

	@Column(name = "nombre_proyecto", length = 512)
	public String getNombreProyecto() {
		return this.nombreProyecto;
	}

	public void setNombreProyecto(String nombreProyecto) {
		this.nombreProyecto = nombreProyecto;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaingreso", length = 0)
	public Date getFechaingreso() {
		return this.fechaingreso;
	}

	public void setFechaingreso(Date fechaingreso) {
		this.fechaingreso = fechaingreso;
	}

	@Column(name = "finalizado")
	public Integer getFinalizado() {
		return this.finalizado;
	}

	public void setFinalizado(Integer finalizado) {
		this.finalizado = finalizado;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechafin", length = 0)
	public Date getFechafin() {
		return this.fechafin;
	}

	public void setFechafin(Date fechafin) {
		this.fechafin = fechafin;
	}



	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaestado", length = 0)
	public Date getFechaestado() {
		return this.fechaestado;
	}

	public void setFechaestado(Date fechaestado) {
		this.fechaestado = fechaestado;
	}

	@Column(name = "nombre_proyecto_decorador", length = 512)
	public String getNombreProyectoDecorador() {
		return this.nombreProyectoDecorador;
	}

	public void setNombreProyectoDecorador(String nombreProyectoDecorador) {
		this.nombreProyectoDecorador = nombreProyectoDecorador;
	}

	@Column(name = "paso3_propuestas", length = 4048)
	public String getPaso3Propuestas() {
		return this.paso3Propuestas;
	}

	public void setPaso3Propuestas(String paso3Propuestas) {
		this.paso3Propuestas = paso3Propuestas;
	}

	@Column(name = "paso3_3d", length = 4048)
	public String getPaso33d() {
		return this.paso33d;
	}

	public void setPaso33d(String paso33d) {
		this.paso33d = paso33d;
	}

	@Column(name = "paso4_plano", length = 4048)
	public String getPaso4Plano() {
		return this.paso4Plano;
	}

	public void setPaso4Plano(String paso4Plano) {
		this.paso4Plano = paso4Plano;
	}

	@Column(name = "paso4_ldlc", length = 4048)
	public String getPaso4Ldlc() {
		return this.paso4Ldlc;
	}

	public void setPaso4Ldlc(String paso4Ldlc) {
		this.paso4Ldlc = paso4Ldlc;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	@JsonManagedReference
	public Set<Citas> getCitases() {
		return this.citases;
	}

	public void setCitases(Set<Citas> citases) {
		this.citases = citases;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	@JsonManagedReference
	public Set<Regalos> getRegaloses() {
		return this.regaloses;
	}

	public void setRegaloses(Set<Regalos> regaloses) {
		this.regaloses = regaloses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	@JsonManagedReference
	public Set<Preferences> getPreferenceses() {
		return this.preferenceses;
	}

	public void setPreferenceses(Set<Preferences> preferenceses) {
		this.preferenceses = preferenceses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	@JsonManagedReference
	public Set<Information> getInformations() {
		return this.informations;
	}

	public void setInformations(Set<Information> informations) {
		this.informations = informations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	@JsonManagedReference
	public Set<Pagos> getPagoses() {
		return this.pagoses;
	}

	public void setPagoses(Set<Pagos> pagoses) {
		this.pagoses = pagoses;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "estado")
	@JsonBackReference
	public ProjectsStates getProjectsStates() {
		return this.projectsStates;
	}

	public void setProjectsStates(ProjectsStates projectsStates) {
		this.projectsStates = projectsStates;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "pagado")
	@JsonBackReference
	public ProjectsTypes getProjectsTypes() {
		return this.projectsTypes;
	}

	public void setProjectsTypes(ProjectsTypes projectsTypes) {
		this.projectsTypes = projectsTypes;
	}
	
	public void setUser_sin() {
		Users u= this.users;
		if(u!=null)
		u.setProjectses(null);
		this.user_sin = u;
	}
	public void setPropuestas(String path) throws Exception {
		if(path!=null){
			this.path=path;
		}
		if(this.path.length()>0){
			dataBBDD db= new dataBBDD();
					this.propuestas = db.getPropuestas(
							db.getUsernameFromIdProject(this.id),
							this.nombreProyecto, "propuestas", path);
					this.planos = db.getPropuestas(
							db.getUsernameFromIdProject(this.id),
							this.nombreProyecto, "planos", path);
					if(this.informations.size()>0){
						informations.iterator().next().setFiles(path);
					}
		}
		
		
	}
	
	public void setPropuestas() throws Exception {
		if(this.path.length()>0){
			dataBBDD db= new dataBBDD();
					this.propuestas = db.getPropuestas(
							db.getUsernameFromIdProject(this.id),
							this.nombreProyecto, "propuestas", this.path);
					this.planos = db.getPropuestas(
							db.getUsernameFromIdProject(this.id),
							this.nombreProyecto, "planos", this.path);
					
					if(this.informations.size()>0){
						informations.iterator().next().setFiles(this.path);
					}
		}
		
		
	}
	public void setDiasRestantes(){
		if(this.fechafin==null){
			this.fechafin=this.fechaingreso;
		}
		
		int dias=diferenciaEnDias2(new Date(), this.fechafin);
		if(dias<0) diasRestantes="0";
		else
			diasRestantes=""+dias;
	}
	
	private static int diferenciaEnDias2(Date fechaMayor, Date fechaMenor) {
			long diferenciaEn_ms = fechaMayor.getTime()-fechaMenor.getTime();
			long dias = diferenciaEn_ms / (1000 * 60 * 60 * 24);
			return (int) dias;
		}
	
	public void insertStates(){
		try {
			Core c= new CoreImpl();
			this.estadillo=c.getIdStateFromProjectbyIdProject(id);
			this.projectsStatillos=c.getProjectStatebyId(this.estadillo);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("ERROR en try catch:" + e.getMessage());
			e.printStackTrace();
		}
	}
	public void insertType(){
		try {
			Core c= new CoreImpl();
			this.pagadillo=c.getIdTypeFromProyectbyId(this.id);
			this.pagado=c.getIdTypeFromProyectbyId(this.id);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("ERROR en try catch:" + e.getMessage());
			e.printStackTrace();
		}
	}
	
}
