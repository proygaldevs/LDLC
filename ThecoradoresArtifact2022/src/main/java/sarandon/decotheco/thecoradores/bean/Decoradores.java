package sarandon.decotheco.thecoradores.bean;
// Generated 16-abr-2017 9:59:59 by Hibernate Tools 5.2.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import sarandon.assistance.servlet.more.dataBBDD;
import sarandon.assistance.vo.Proyecto;




/**
 * Decoradores generated by hbm2java
 */
@Entity
@Table(name = "decoradores", catalog = "decotheco", uniqueConstraints = {
		@UniqueConstraint(columnNames = "identificador_unico"), @UniqueConstraint(columnNames = "mail") })
public class Decoradores implements java.io.Serializable {

	private Integer id;
	private Date fechaingreso;
	private Date fechaalta;
	private String nombre;
	private String mail;
	private String pass;
	private String urlBlog;
	private String urlRss;
	private Integer activo;
	private String identificadorUnico;
	private Set<Projects> projectses = new HashSet<Projects>(0);
	public ArrayList<Proyecto> proyectos = new ArrayList<>(0);
	private Set<Trabajos> trabajoses = new HashSet<Trabajos>(0);
	private Set<Etiquetas> etiquetas = new HashSet<Etiquetas>(0);
	private String texto_decorador;
	private String disponibilidad;
	
	public ArrayList<String> filesComposicion= new ArrayList<String>(0);
	public ArrayList<String> filesTrabajo= new ArrayList<String>(0);
	public ArrayList<String> filesCabecera= new ArrayList<String>(0);
	public ArrayList<String> filesCara= new ArrayList<String>(0);
	
	public Decoradores() {
	}

	public Decoradores(String mail, String path) {
		this.mail = mail;
		setFiles(path);
	}

	public Decoradores(Date fechaingreso, Date fechaalta, String nombre, String mail, String pass, String urlBlog,
			String urlRss, Integer activo, String identificadorUnico, Set<Projects> projectses,
			Set<Trabajos> trabajoses,  Set<Etiquetas> etiquetas, String texto_decorador) {
		this.fechaingreso = fechaingreso;
		this.fechaalta = fechaalta;
		this.nombre = nombre;
		this.mail = mail;
		this.pass = pass;
		this.urlBlog = urlBlog;
		this.urlRss = urlRss;
		this.activo = activo;
		this.identificadorUnico = identificadorUnico;
		this.projectses = projectses;
		this.trabajoses = trabajoses;
		this.etiquetas = etiquetas;
		this.texto_decorador = texto_decorador;
		
	} 

	public Decoradores(int id,Date fechaingreso, Date fechaalta, String nombre, String mail, String pass, String urlBlog,
			String urlRss, Integer activo, String identificadorUnico, String texto_decorador) {
		this.id = id;
		this.fechaingreso = fechaingreso;
		this.fechaalta = fechaalta;
		this.nombre = nombre;
		this.mail = mail;
		this.pass = pass;
		this.urlBlog = urlBlog;
		this.urlRss = urlRss;
		this.activo = activo;
		this.identificadorUnico = identificadorUnico;
		this.texto_decorador = texto_decorador;
		
	}
	public Decoradores(int id,Date fechaingreso, Date fechaalta, String nombre, String mail, String pass, String urlBlog,
			String urlRss, Integer activo, String identificadorUnico, String texto_decorador, String disponibilidad) {
		this.id = id;
		this.fechaingreso = fechaingreso;
		this.fechaalta = fechaalta;
		this.nombre = nombre;
		this.mail = mail;
		this.pass = pass;
		this.urlBlog = urlBlog;
		this.urlRss = urlRss;
		this.activo = activo;
		this.identificadorUnico = identificadorUnico;
		this.texto_decorador = texto_decorador;
		this.setDisponibilidad(disponibilidad);
		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaingreso", length = 0)
	public Date getFechaingreso() {
		return this.fechaingreso;
	}

	public void setFechaingreso(Date fechaingreso) {
		this.fechaingreso = fechaingreso;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaalta", length = 0)
	public Date getFechaalta() {
		return this.fechaalta;
	}

	public void setFechaalta(Date fechaalta) {
		this.fechaalta = fechaalta;
	}

	@Column(name = "nombre", length = 45)
	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	@Column(name = "mail", unique = true, length = 45)
	public String getMail() {
		return this.mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	@Column(name = "pass", length = 45)
	public String getPass() {
		return this.pass;
	}

	public void setPass(String pass) {
		this.pass = pass;
	}

	@Column(name = "url_blog", length = 512)
	public String getUrlBlog() {
		return this.urlBlog;
	}

	public void setUrlBlog(String urlBlog) {
		this.urlBlog = urlBlog;
	}

	@Column(name = "url_rss", length = 512)
	public String getUrlRss() {
		return this.urlRss;
	}

	public void setUrlRss(String urlRss) {
		this.urlRss = urlRss;
	}

	@Column(name = "activo")
	public Integer getActivo() {
		return this.activo;
	}

	public void setActivo(Integer activo) {
		this.activo = activo;
	}

	@Column(name = "identificador_unico", unique = true, length = 767)
	public String getIdentificadorUnico() {
		return this.identificadorUnico;
	}

	public void setIdentificadorUnico(String identificadorUnico) {
		this.identificadorUnico = identificadorUnico;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "decoradores")
	@JsonManagedReference
	public Set<Projects> getProjectses() {
		return this.projectses;
	}

	public void setProjectses(Set<Projects> projectses) {
		this.projectses = projectses;
	}

	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "decoradores")
	@JsonManagedReference
	public Set<Trabajos> getTrabajoses() {
		return this.trabajoses;
	}

	public void setTrabajoses(Set<Trabajos> trabajoses) {
		this.trabajoses = trabajoses;
	}

	@ManyToMany( cascade = CascadeType.ALL)
	@JoinTable(name = "aux_decoradores_etiquetas", catalog = "decotheco", joinColumns = {
			@JoinColumn(name = "id_decoradores") },
			inverseJoinColumns = { @JoinColumn(name = "id_etiqueta") })
	public Set<Etiquetas> getEtiquetas() {
		return this.etiquetas;
	}


	public void setEtiquetas(Set<Etiquetas> etiquetas) {
		this.etiquetas = etiquetas;
	}
	
	@Column(name = "texto_decorador", length = 4096)
	public String getTexto_decorador() {
		return this.texto_decorador;
	}

	public void setTexto_decorador(String texto_decorador) {
		this.texto_decorador = texto_decorador;
	}
	
	public void setFiles(String path){
		if(this.mail!=null)
			if(this.mail.length()>2){
				dataBBDD db= new dataBBDD();
				//this.filesComposicion = db.getFiles("decoradores/"+this.mail+"/perfiles/composicion/", path);
				this.filesCara = db.getFiles("decoradores/"+this.mail+"/perfiles/cara/", path);
				this.filesTrabajo = db.getFiles("decoradores/"+this.mail+"/perfiles/trabajo/", path);
				this.filesCabecera = db.getFiles("decoradores/"+this.mail+"/perfiles/cabecera/", path);
				if (this.filesCabecera.size()==0) this.filesCabecera=this.filesTrabajo;
				this.filesComposicion=this.filesTrabajo;
			}
		
	}
	public void setCara(String path){
		if(this.mail!=null)
			if(this.mail.length()>2){
				dataBBDD db= new dataBBDD();
				//this.filesComposicion = db.getFiles("decoradores/"+this.mail+"/perfiles/composicion/", path);
				this.filesCara = db.getFiles("decoradores/"+this.mail+"/perfiles/cara/", path);
			}
		
	}
	
	public void setImagesToTrabajos(String path){
		if (this.trabajoses!=null) {
			if (this.trabajoses.size()>0) {
			
				ArrayList<Trabajos> t= new ArrayList<>(this.trabajoses);
				for( int j=0; j<t.size(); j++){
					t.get(j).setFiles(path);
				}
			
			}
			
		}
	}
	public void setStatesAndToProjects(){
		if(this.projectses!=null){
			ArrayList<Projects> p= new ArrayList<>(this.projectses);
			for(int i=0;i<p.size();i++){
				p.get(i).insertStates();
				p.get(i).insertType();
			}
		}
	}

	public String getDisponibilidad() {
		return disponibilidad;
	}

	public void setDisponibilidad(String disponibilidad) {
		this.disponibilidad = disponibilidad;
	}
}
