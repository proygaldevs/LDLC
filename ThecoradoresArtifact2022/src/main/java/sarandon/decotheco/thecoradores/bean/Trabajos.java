package sarandon.decotheco.thecoradores.bean;
// Generated 16-abr-2017 9:59:59 by Hibernate Tools 5.2.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.apache.log4j.Logger;

import com.fasterxml.jackson.annotation.JsonBackReference;

import sarandon.assistance.model.Core;
import sarandon.assistance.model.CoreImpl;
import sarandon.assistance.servlet.more.dataBBDD;
import sarandon.assistance.vo.Proyecto;


/**
 * Trabajos generated by hbm2java
 */
@Entity
@Table(name = "trabajos", catalog = "decotheco")
public class Trabajos implements java.io.Serializable {
	private final static Logger log = Logger.getLogger(dataBBDD.class);
	private Integer id;
	private Decoradores decoradores;
	private String imgPrincipal;
	private String titulo;
	private String texto;
	private Integer activo;
	private Date fechaingreso;
	private Set<Etiquetas> etiquetas = new HashSet<Etiquetas>(0);
	public int id_decorador;
	public Proyecto Proyectos;

	public ArrayList<String> imagenesTrabajos= new ArrayList<String>(0);
	
	public Trabajos() {
	}

	public Trabajos(Decoradores decoradores, String imgPrincipal, String titulo, String texto, Integer activo,
			Date fechaingreso, Set<Etiquetas> etiquetas) {
		this.decoradores = decoradores;
		this.imgPrincipal = imgPrincipal;
		this.titulo = titulo;
		this.texto = texto;
		this.activo = activo;
		this.fechaingreso = fechaingreso;
		this.etiquetas = etiquetas;
	}
	
	public Trabajos(int id,  String imgPrincipal, String titulo, String texto, Integer activo,
			Date fechaingreso) {
		
		this.id = id;
		this.imgPrincipal = imgPrincipal;
		this.titulo = titulo;
		this.texto = texto;
		this.activo = activo;
		this.fechaingreso = fechaingreso;
		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_decorador")
	@JsonBackReference
	public Decoradores getDecoradores() {
		return this.decoradores;
	}

	public void setDecoradores(Decoradores decoradores) {
		this.decoradores = decoradores;
	}

	@Column(name = "img_principal", length = 45)
	public String getImgPrincipal() {
		return this.imgPrincipal;
	}

	public void setImgPrincipal(String imgPrincipal) {
		this.imgPrincipal = imgPrincipal;
	}

	@Column(name = "titulo", length = 45)
	public String getTitulo() {
		return this.titulo;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	@Column(name = "texto", length = 45)
	public String getTexto() {
		return this.texto;
	}

	public void setTexto(String texto) {
		this.texto = texto;
	}

	@Column(name = "activo")
	public Integer getActivo() {
		return this.activo;
	}

	public void setActivo(Integer activo) {
		this.activo = activo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fechaingreso", length = 0)
	public Date getFechaingreso() {
		return this.fechaingreso;
	}

	public void setFechaingreso(Date fechaingreso) {
		this.fechaingreso = fechaingreso;
	}

	@ManyToMany( cascade = CascadeType.ALL)
	@JoinTable(name = "aux_trabajos_etiquetas", catalog = "decotheco", joinColumns = {
			@JoinColumn(name = "id_trabajo") },
			inverseJoinColumns = { @JoinColumn(name = "id_etiqueta") })
	public Set<Etiquetas> getEtiquetas() {
		return this.etiquetas;
	}


	public void setEtiquetas(Set<Etiquetas> etiquetas) {
		this.etiquetas = etiquetas;
	}
	
	public void setFiles(String path){
		if(this.id!=null)
			if(this.id>-1){
				dataBBDD db= new dataBBDD();
				if(decoradores==null) {
					Core core= new CoreImpl();
					try {
						decoradores=core.getDecoradorById(id_decorador, -1, -1, path);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						log.error("ERROR en try catch:" + e.getMessage());
						e.printStackTrace();
					}
				}
				this.imagenesTrabajos = db.getFiles("decoradores/"+decoradores.getMail()+"/trabajos/"+this.getId()+"/", path);
			}
		
	}
	public void setFiles(String path, String mail){
		if(this.id!=null)
			if(this.id>-1){
				dataBBDD db= new dataBBDD();
				
				this.imagenesTrabajos = db.getFiles("decoradores/"+mail+"/trabajos/"+this.getId()+"/", path);
			}
		
	}
	 
	
	
}
